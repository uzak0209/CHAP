{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  rooms: [],\n  currentRoom: null,\n  isLoading: false,\n  error: null\n};\nconst chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    setRooms: (state, action) => {\n      state.rooms = action.payload;\n    },\n    addRoom: (state, action) => {\n      state.rooms.push(action.payload);\n    },\n    setCurrentRoom: (state, action) => {\n      state.currentRoom = action.payload;\n    },\n    addMessage: (state, action) => {\n      var _state$currentRoom;\n      const room = state.rooms.find(r => r.id === action.payload.roomId);\n      if (room) {\n        room.messages.push(action.payload.message);\n      }\n      if (((_state$currentRoom = state.currentRoom) === null || _state$currentRoom === void 0 ? void 0 : _state$currentRoom.id) === action.payload.roomId) {\n        state.currentRoom.messages.push(action.payload.message);\n      }\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setLoading,\n  setRooms,\n  addRoom,\n  setCurrentRoom,\n  addMessage,\n  setError\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","rooms","currentRoom","isLoading","error","chatSlice","name","reducers","setLoading","state","action","payload","setRooms","addRoom","push","setCurrentRoom","addMessage","_state$currentRoom","room","find","r","id","roomId","messages","message","setError","actions","reducer"],"sources":["C:/Users/PCUSER/VScode-project/CHAP/web/src/store/slices/chatSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface ChatMessage {\r\n  id: string;\r\n  userId: string;\r\n  userName: string;\r\n  content: string;\r\n  type: 'text' | 'image' | 'stamp';\r\n  timestamp: string;\r\n}\r\n\r\ninterface ChatRoom {\r\n  id: string;\r\n  title: string;\r\n  createdAt: string;\r\n  expiresAt: string;\r\n  location: {\r\n    latitude: number;\r\n    longitude: number;\r\n    radius: number;\r\n  };\r\n  participants: string[];\r\n  messages: ChatMessage[];\r\n}\r\n\r\ninterface ChatState {\r\n  rooms: ChatRoom[];\r\n  currentRoom: ChatRoom | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: ChatState = {\r\n  rooms: [],\r\n  currentRoom: null,\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nconst chatSlice = createSlice({\r\n  name: 'chat',\r\n  initialState,\r\n  reducers: {\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setRooms: (state, action: PayloadAction<ChatRoom[]>) => {\r\n      state.rooms = action.payload;\r\n    },\r\n    addRoom: (state, action: PayloadAction<ChatRoom>) => {\r\n      state.rooms.push(action.payload);\r\n    },\r\n    setCurrentRoom: (state, action: PayloadAction<ChatRoom | null>) => {\r\n      state.currentRoom = action.payload;\r\n    },\r\n    addMessage: (state, action: PayloadAction<{ roomId: string; message: ChatMessage }>) => {\r\n      const room = state.rooms.find(r => r.id === action.payload.roomId);\r\n      if (room) {\r\n        room.messages.push(action.payload.message);\r\n      }\r\n      if (state.currentRoom?.id === action.payload.roomId) {\r\n        state.currentRoom.messages.push(action.payload.message);\r\n      }\r\n    },\r\n    setError: (state, action: PayloadAction<string | null>) => {\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setLoading, setRooms, addRoom, setCurrentRoom, addMessage, setError } = chatSlice.actions;\r\nexport default chatSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAgC7D,MAAMC,YAAuB,GAAG;EAC9BC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,IAAI;EACjBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EACZN,YAAY;EACZO,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACN,SAAS,GAAGO,MAAM,CAACC,OAAO;IAClC,CAAC;IACDC,QAAQ,EAAEA,CAACH,KAAK,EAAEC,MAAiC,KAAK;MACtDD,KAAK,CAACR,KAAK,GAAGS,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDE,OAAO,EAAEA,CAACJ,KAAK,EAAEC,MAA+B,KAAK;MACnDD,KAAK,CAACR,KAAK,CAACa,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC;IAClC,CAAC;IACDI,cAAc,EAAEA,CAACN,KAAK,EAAEC,MAAsC,KAAK;MACjED,KAAK,CAACP,WAAW,GAAGQ,MAAM,CAACC,OAAO;IACpC,CAAC;IACDK,UAAU,EAAEA,CAACP,KAAK,EAAEC,MAA+D,KAAK;MAAA,IAAAO,kBAAA;MACtF,MAAMC,IAAI,GAAGT,KAAK,CAACR,KAAK,CAACkB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKX,MAAM,CAACC,OAAO,CAACW,MAAM,CAAC;MAClE,IAAIJ,IAAI,EAAE;QACRA,IAAI,CAACK,QAAQ,CAACT,IAAI,CAACJ,MAAM,CAACC,OAAO,CAACa,OAAO,CAAC;MAC5C;MACA,IAAI,EAAAP,kBAAA,GAAAR,KAAK,CAACP,WAAW,cAAAe,kBAAA,uBAAjBA,kBAAA,CAAmBI,EAAE,MAAKX,MAAM,CAACC,OAAO,CAACW,MAAM,EAAE;QACnDb,KAAK,CAACP,WAAW,CAACqB,QAAQ,CAACT,IAAI,CAACJ,MAAM,CAACC,OAAO,CAACa,OAAO,CAAC;MACzD;IACF,CAAC;IACDC,QAAQ,EAAEA,CAAChB,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,UAAU;EAAEI,QAAQ;EAAEC,OAAO;EAAEE,cAAc;EAAEC,UAAU;EAAES;AAAS,CAAC,GAAGpB,SAAS,CAACqB,OAAO;AACxG,eAAerB,SAAS,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}