@startuml Data Flow Diagram

title CHAP Application - Data Flow

' Actors
actor "User" as user
participant "Next.js\nFrontend" as frontend
participant "Cloudflare" as cf
participant "EC2\nGin Server" as api
participant "PostgreSQL\nRDS" as db
participant "Google OAuth" as google

' Authentication Flow
group Authentication Flow
    user -> frontend : 1. Login Request
    frontend -> cf : 2. API Call
    cf -> api : 3. Forward Request
    api -> google : 4. OAuth Verification
    google -> api : 5. User Profile
    api -> db : 6. Store/Update User
    db -> api : 7. User Data
    api -> cf : 8. JWT Token Response
    cf -> frontend : 9. Auth Response
    frontend -> user : 10. Login Success
end

' Event Management Flow
group Event Management Flow
    user -> frontend : 1. Create Event
    frontend -> frontend : 2. Redux State Update
    frontend -> cf : 3. POST /events
    cf -> api : 4. Forward Request
    
    alt Authentication Check
        api -> api : 5. Verify JWT Token
    else Invalid Token
        api -> cf : 5b. 401 Unauthorized
        cf -> frontend : 6b. Auth Error
        frontend -> user : 7b. Redirect to Login
    end
    
    api -> db : 6. INSERT Event
    db -> api : 7. Event Created
    api -> cf : 8. Success Response
    cf -> frontend : 9. Event Data
    frontend -> frontend : 10. Update Redux Store
    frontend -> user : 11. Show Success
end

' Data Retrieval Flow
group Data Retrieval Flow
    user -> frontend : 1. View Events/Threads
    frontend -> cf : 2. GET /events or /threads
    cf -> api : 3. Forward Request
    
    alt Location-based Filtering
        api -> api : 4. Apply Position Filter
    end
    
    api -> db : 5. SELECT Query
    db -> api : 6. Results
    api -> cf : 7. JSON Response
    cf -> frontend : 8. Data
    frontend -> frontend : 9. Update Redux Store
    frontend -> user : 10. Display Data
end

' File Upload Flow (Future)
group File Upload Flow
    user -> frontend : 1. Upload Image
    frontend -> cf : 2. POST /upload
    cf -> api : 3. Forward File
    api -> api : 4. Process File
    
    alt Storage Choice
        api -> db : 5a. Save to Database
    else
        api -> api : 5b. Save to S3 (Future)
    end
    
    api -> cf : 6. File URL
    cf -> frontend : 7. Upload Success
    frontend -> user : 8. Show Success
end

' Error Handling
group Error Handling
    frontend -> cf : 1. API Request
    cf -> api : 2. Forward
    
    alt Database Error
        api -> db : 3. Query
        db -> api : 4. Error Response
        api -> cf : 5. 500 Server Error
    else Validation Error
        api -> cf : 5b. 400 Bad Request
    else Network Error
        cf -> frontend : 5c. Connection Error
    end
    
    cf -> frontend : 6. Error Response
    frontend -> frontend : 7. Update Error State
    frontend -> user : 8. Show Error Message
end

note over user, google
**Key Technologies:**
- **Frontend:** Next.js 13+ (App Router), Redux Toolkit, TypeScript
- **Backend:** Go (Gin), GORM, JWT Authentication
- **Database:** PostgreSQL 17.2 with UUID primary keys
- **Infrastructure:** AWS EC2, RDS, VPC
- **Security:** JWT tokens, CORS, Security Groups
end note

@enduml
